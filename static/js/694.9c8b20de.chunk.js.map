{"version":3,"file":"static/js/694.9c8b20de.chunk.js","mappings":"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","sources":["components/SingUpForm/SingUpFormikForm.js","pages/SignUpPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { InputNameEmail } from 'components/InputEmailName/InputEmailName';\nimport InputPassword from 'components/InputPassword/InputPassword';\nimport {\n  ButtonLink,\n  ButtonSubmit,\n  FormContainer,\n  InputForm,\n  Title,\n} from './SingUpFormikForm.styled';\n\nimport { signUp } from '../../redux/auth/operations';\nimport { Container } from '../../styles/GlobalStyle';\n\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\nconst passwordRegex = /^.{8,64}$/;\n\nconst formSchema = Yup.object().shape({\n  email: Yup.string()\n    .matches(emailRegex, {\n      message: `Invalid email.Please enter a valid email in the format: example@example.com.`,\n    })\n    .required('Required'),\n  password: Yup.string()\n    .matches(passwordRegex, {\n      message: `Invalid password. Password must be at least 8 characters long.`,\n    })\n    .required('Required'),\n  repeatPassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n    .required('Required'),\n});\n\nexport const SingUpFormFormik = () => {\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      repeatPassword: '',\n    },\n    validationSchema: formSchema,\n    onSubmit: async (values, actions) => {\n      dispatch(\n        signUp({\n          email: values.email,\n          password: values.password,\n        })\n      );\n      actions.resetForm();\n      console.log('Sign up successful!');\n      console.log(values.email);\n      console.log(values.password);\n    },\n  });\n  return (\n    <Container>\n      <FormContainer onSubmit={formik.handleSubmit}>\n        <Title>Sign Up</Title>\n        <InputForm>\n          <label htmlFor=\"email\">Enter your email</label>\n          <InputNameEmail\n            placeholderText={'E-mail'}\n            type={'email'}\n            value={formik.values.email}\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            error={formik.touched.email && Boolean(formik.errors.email)}\n            id={'email'}\n            helperText={'Invalid email format'}\n          />\n        </InputForm>\n        <InputForm style={{ marginTop: formik.errors.email ? '10px' : '0px' }}>\n          <label htmlFor=\"password\">Enter your password</label>\n          <InputPassword\n            placeholderText={'Password'}\n            type={'password'}\n            value={formik.values.password}\n            onChange={formik.handleChange}\n            error={formik.touched.password && Boolean(formik.errors.password)}\n            id={'password'}\n            helperText={'Must be at least 8 characters long'}\n            onBlur={formik.handleBlur}\n          />\n        </InputForm>\n\n        <InputForm\n          style={{ marginTop: formik.errors.password ? '10px' : '0px' }}\n        >\n          <label htmlFor=\"email\">Repeat password</label>\n          <InputPassword\n            placeholderText={'Repeat password'}\n            type={'password'}\n            value={formik.values.repeatPassword}\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            error={\n              formik.touched.repeatPassword &&\n              Boolean(formik.errors.repeatPassword)\n            }\n            id={'repeatPassword'}\n            helperText={'Passwords must match'}\n          />\n        </InputForm>\n        <ButtonSubmit\n          type=\"submit\"\n          style={{ marginTop: formik.errors.repeatPassword ? '10px' : '0px' }}\n        >\n          Sign Up\n        </ButtonSubmit>\n        <ButtonLink>\n          <a href=\"signin\">Sign In</a>\n        </ButtonLink>\n      </FormContainer>\n    </Container>\n  );\n};\n","import { SingUpFormFormik } from 'components/SingUpForm/SingUpFormikForm';\nimport AuthLayout from '../components/AuthLayout/AuthLayout';\n\nconst SignUpPage = () => {\n  return (\n    <AuthLayout>\n      <SingUpFormFormik />\n    </AuthLayout>\n  );\n};\n\nexport default SignUpPage;\n"],"names":["formSchema","Yup","shape","email","matches","message","required","password","repeatPassword","oneOf","SingUpFormFormik","dispatch","useDispatch","formik","useFormik","initialValues","validationSchema","onSubmit","async","values","actions","signUp","resetForm","console","log","_jsx","Container","children","_jsxs","FormContainer","handleSubmit","Title","InputForm","htmlFor","InputNameEmail","placeholderText","type","value","onChange","handleChange","onBlur","handleBlur","error","touched","Boolean","errors","id","helperText","style","marginTop","InputPassword","ButtonSubmit","ButtonLink","href","SignUpPage","AuthLayout"],"sourceRoot":""}